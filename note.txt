배열 슬라이싱
arr[a:b] 는 a부터 b-1 의 인덱스를 잘라낸 것이다.
print('%x' % a) a를 16진수로 출력(소문자) %X  로 하면 대문자로 출력
%o : 8진수

a = int(a, 16) a를 16진수로 변환
a = ord(a) 문자 a 를 10진수로 변환
a = chr(a) 정수 a를 유니코드 문자로 변환
 파이썬의  input 은 기본적으로 문자열로 들어온다. 따라서 입력값을 사용할때는 자료형을 주의해야한다.
 
 
print(정수 * 문자) - 문자를 정수 번 반복하게 한다.
a ** b 는 a를 b 번 곱한 거듭제곱을 나타낸다.

python에서는 정수 / 정수 도 실수가 된다.
단순히 두 수를 나눈 몫을 구하기 위해 // 연산자를 사용할 수 있다.
format(num, ".nf") - num을 소수점 아래 (n+1)자리에서 반올림 해준다.

논리값을 바꾸는 연산자로  !가 아니라 not을 사용한다.
&& -> and
|| -> or

비트단위로 참/거짓을 바꾸는 연산자는 ~이다.

3항연산
(a if (조건) else b)

for i in range(끝)
for i in range(시작, 끝)
for i in range(시작, 끝, 증감)

시작값은 포함되고 끝 값은 포함되지 않는다. 
인덱스는 증감이 양수이면 끝 -1 이고 음수이면 끝 + 1이다.

print(a, end=' ') - 출력 후 줄바꿈이 아니라 공백이 된다.

d = [[0 for j in range(w)] for i in range(h)] - 2차원 리스트 짧은 코드로 만드는 법
* w와 h 를 주의할것

빈 리스트를 만드는 법
arr = []
arr = list()
arr = list(range(0, 10)) - 0부터 9까지 들어있는 리스트 생성

map 함수는 리스트의 요소들마다 지정된 함수를 적용시킨다. 원본리스틀 변경하지 않고 새 리스트를 생성한다.
따라서 리스트에 할당을 할때  list() 로 묶어주어야 한다.
map(함수, 리스트)
arr = list(map(int, range(0, 9))) - 0부터 8까지 들어있는 리스트를 int형으로 변환한 arr 리스트 생성

이진탐색 라이브러리
from bisect import bisect_right
bisect_right(리스트, 찾고자하는 값)
bisect_right, bisect_left가 있는데 기본적으로 찾고자 하는 값이 리스트에서 정렬순에 따라 어디에
들어가야하는지 들어가는 인덱스를 반화하는데 동일한 값이 있을 경우에 rigth는 해당 리스트의 인덱스의
+1을(다음 인덱스) left는 -1(이전 인덱스)를 반환한다.


set()은 집합 자료형으로 중복을 제거할 수 있으나 순서가 달라진다.
따라서 결국 중복을 제거해야 할 자료를 입력 받을때 집합 자료형으로 받으면 
입력 수준에서 중복을 제거할 수 있다.


sort 와 sorted의 차이
sorted는 원본 내용을 수정하지 않는다. 따라서 sorted의 결과를 변수에 지정해줘야한다.
arr2 = arr1.sorted( <list>, key =<function>, reverse = <bool>)
-리스트, 튜플, 딕셔너리, 문자열 모두 사용 가능
-reverse가 true면 내림차순이다.
sort는 원본 내용을 수정한다. 따라서 반환값이 null이다.
arr.sort(ley=<function> reverse = <bool>)
2중 리스트에서 특정 요소를 기준으로 정렬
arr = [[50, 'dsasd'], [40, 'ddd']]
arr.sort(key=lambda x:x[0])

문자열관련함수
.count('x') - 문자열 중에 x의 개수 반환
"a".join('qqqq') - qqqq의 각 문자 사이에 'a'를 삽입한다.
